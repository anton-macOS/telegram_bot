from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from db.session import get_db
from crud.user import user_crud

from telegram_bot.mentor_management import start_reg, reg_finish, TgForm
import telegram_bot.keyboards as kb
mentor_handler = Router()


@mentor_handler.callback_query(lambda callback: callback.data and callback.data.startswith('mentor_'))
async def mentor_handler_menu_handler(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split('_')[1]
    if action == 'adaptation':
        await callback.message.answer("–ù–∞—á–∏–Ω–∞–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é")
        await start_reg(callback.message, state)
    elif action == 'read':
        await callback.message.edit_text("–¢—É—Ç —Ç–∏ –∑–º–æ–∂–µ—à –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ –∑ –æ–±–æ–≤'—è–∑–∫–∞–º–∏ —è–∫—ñ –Ω–∞ —Ç–µ–±–µ"
                                         " –æ—á—ñ–∫—É—é—Ç—å. \n ‚ùó–ü–µ—Ä—à–µ –∑ —á–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—á–∞—Ç–∏ —Ü–µ –≥—ñ–ª–∫–∞ - –ê–¥–∞–ø—Ç–∞—Ü—ñ—è"
                                         " –∫—É—Ä–∞—Ç–æ—Ä—ñ–≤‚ùó\n –¢–∞–∫–æ–∂ —è —Ç—Ä–∏–º–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ '–†–µ–≥–ª–∞–º–µ–Ω—Ç —Ä–æ–±–æ—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä—ñ–≤'\n",
                                         reply_markup=kb.notion_btn)
    elif action == 'work':
        await state.set_state(TgForm.tg_name)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –¢–ì –∞–∫–∫–∞—É–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ - @example')
    elif action == 'instruction':
        await callback.message.answer('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–∑–∏—Ç–∫–∏ –∏ –∫—Ä—É–∂–æ—á–∫–∞: \n'
                                      'ü§™ \n'
                                      'ü§™ \n'
                                      'ü§™ \n'
                                      'ü§™ \n'
                                      'ü§™ \n'
                                      '–í–æ—Ç —Ç–∞–∫ –≤–æ—Ç!', reply_markup=kb.back_mentor_menu)
    elif action == 'request':
        await callback.message.answer('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: \n'
                                      '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç –í–∞–º –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å @Velentina \n'
                                      '–í–æ—Ç —Ç–∞–∫ –≤–æ—Ç!')


@mentor_handler.callback_query(lambda callback: callback.data == 'finish_registration')
async def finish_mentor_handler_registration(callback: CallbackQuery, state: FSMContext):
    await reg_finish(callback.message, state)


@mentor_handler.callback_query(lambda callback: callback.data == 'repeat_mentor_handler_registration')
async def repeat_mentor_handler_registration(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞!')
    await state.clear()
    await start_reg(callback.message, state)


@mentor_handler.callback_query(lambda callback: callback.data == 'back_to_mentor_menu')
async def back_to_mentor_handler_menu(callback: CallbackQuery):
    with get_db() as db:
        user = f'@{callback.from_user.username}'
        check_working_tg = user_crud.get_field_by_username(db=db, username=user, field='work_tg_nick')
        if check_working_tg is None:
            await callback.message.edit_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –ù–∞—Å—Ç–∞–≤–Ω–∏–∫. –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:',
                                             reply_markup=kb.mentor_menu)
        else:
            await callback.message.edit_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –ù–∞—Å—Ç–∞–≤–Ω–∏–∫. –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:',
                                             reply_markup=kb.mentor_menu_full_registered)
